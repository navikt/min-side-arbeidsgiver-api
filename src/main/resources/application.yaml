server:
  port: 8080
  max-http-request-header-size: 10KB
  servlet:
    context-path: /ditt-nav-arbeidsgiver-api

management:
  endpoints.web:
    exposure.include: info, health, metrics, prometheus
    base-path: /internal/actuator
  metrics.distribution:
    percentiles-histogram:
      http.server.requests: true
    percentiles:
      http.server.requests: 0.99,0.95,0.90,0.80,0.50

logging.level:
    org.apache.tomcat.util.http.parser.Cookie: WARN

spring:
  main:
    banner-mode: "off"
  profiles:
    active: local
  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?user=${DB_USERNAME}&password=${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 10001
      max-lifetime: 30001
      leak-detection-threshold: 30000
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      max.poll.interval.ms: 60000
      auto.offset.reset: earliest
      security.protocol: SSL
      ssl:
        keystore:
          type: PKCS12
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore:
          type: PKCS12
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
springdoc:
  swagger-ui:
    enabled: true
  packagesToScan: no.nav.arbeidsgiver.min_side

---

spring:
  config:
    activate:
      on-profile: local
  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://localhost:2345/msa?user=postgres&password=postgres


nais.cluster.name: local

no.nav.security.jwt.issuer:
  tokenx:
    discoveryurl: http://localhost:${mock-oauth2-server.port}/issuer1/.well-known/openid-configuration
    accepted_audience: someaudience

mock:
  enabled: true
  port: 8081
  aktorPort: 8082

altinn:
  altinnHeader: "test"
  APIGwHeader: "test"
  proxyUrl: http://localhost:${mock.port}/altinn-rettigheter-proxy
  proxyFallbackUrl: http://localhost:${mock.port}/altinn
  proxyAudience: fake:fake:fake

ereg-services.baseUrl: "https://ereg-services.dev-fss-pub.nais.io"

token.x:
  privateJwk: fake
  clientId: fake
  issuer: http://fake
  tokenEndpoint: http://fake/token

---

spring:
  config:
    activate:
      on-profile: demo
  flyway:
    enabled: false
  autoconfigure.exclude: "org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration"

no.nav.security.jwt.issuer:
  tokenx:
    discoveryurl: http://arbeidsgiver-fake-login/metadata?issuer=selvbetjening
    accepted_audience: aud-selvbetjening

mock:
  enabled: true
  port: 8081
  aktorPort: 8082

altinn:
  altinnHeader: "test"
  APIGwHeader: "test"
  proxyUrl: http://localhost:${mock.port}/altinn-rettigheter-proxy
  proxyFallbackUrl: http://localhost:${mock.port}/altinn
  proxyAudience: demo:demo:demo

ereg-services.baseUrl: "https://ereg-services.dev-fss-pub.nais.io"

---
spring:
  config:
    activate:
      on-profile: dev-gcp

no.nav.security.jwt.issuer:
  tokenx:
    discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
    accepted_audience: ${TOKEN_X_CLIENT_ID}

altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  proxyUrl: http://altinn-rettigheter-proxy.arbeidsgiver/altinn-rettigheter-proxy
  proxyFallbackUrl: https://api-gw-q1.oera.no
  proxyAudience: dev-gcp:arbeidsgiver:altinn-rettigheter-proxy

ereg-services.baseUrl: "https://ereg-services.dev-fss-pub.nais.io"

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokenEndpoint: ${TOKEN_X_TOKEN_ENDPOINT}
  issuer: ${TOKEN_X_ISSUER}

---

spring:
  config:
    activate:
      on-profile: prod-gcp

no.nav.security.jwt.issuer:
  tokenx:
    discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
    accepted_audience: ${TOKEN_X_CLIENT_ID}

altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  proxyUrl: http://altinn-rettigheter-proxy.arbeidsgiver/altinn-rettigheter-proxy
  proxyFallbackUrl: https://api-gw.oera.no
  proxyAudience: prod-gcp:arbeidsgiver:altinn-rettigheter-proxy

ereg-services.baseUrl: "https://ereg-services.prod-fss-pub.nais.io"

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokenEndpoint: ${TOKEN_X_TOKEN_ENDPOINT}
  issuer: ${TOKEN_X_ISSUER}
