server:
  port: 8080
  max-http-request-header-size: 10KB
  servlet:
    context-path: /ditt-nav-arbeidsgiver-api

management:
  security.enabled: false
  endpoints.web:
    exposure.include: info, health, metrics, prometheus
    base-path: /internal/actuator
  metrics.distribution:
    percentiles-histogram:
      http.server.requests: true
    percentiles:
      http.server.requests: 0.99,0.95,0.90,0.80,0.50

logging.level:
    org.apache.tomcat.util.http.parser.Cookie: WARN

spring:
  main:
    banner-mode: "off"
  profiles:
    active: local
  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?user=${DB_USERNAME}&password=${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 10001
      max-lifetime: 30001
      leak-detection-threshold: 30000
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      max.poll.interval.ms: 60000
      auto.offset.reset: earliest
      security.protocol: SSL
      ssl:
        keystore:
          type: PKCS12
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore:
          type: PKCS12
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
springdoc:
  swagger-ui:
    enabled: true
  packagesToScan: no.nav.arbeidsgiver.min_side

azuread:
  tenantId: ${AZURE_APP_TENANT_ID:}
  openidTokenEndpoint: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT:}
  clientId: ${AZURE_APP_CLIENT_ID:}
  openidIssuer: ${AZURE_OPENID_CONFIG_ISSUER:}
  jwk: ${AZURE_APP_JWK:}

---

spring:
  config:
    activate:
      on-profile: local
  main:
    allow-bean-definition-overriding: true
  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://localhost:2345/msa?user=postgres&password=postgres
  security:
    oauth2.resourceserver.jwt:
      issuer-uri: https://fakedings.intern.dev.nav.no/fake
      audiences: someaudience


nais.cluster.name: local


altinn:
  altinnHeader: "test"
  APIGwHeader: "test"
  APIGwUrl: http://altinn/altinn
  apiBaseUrl: "http://altinn.example.org"

ereg-services.baseUrl: "https://localhost"
sokos-kontoregister.baseUrl: "https://localhost"

token.x:
  privateJwk: fake
  clientId: fake
  issuer: http://fake
  tokenEndpoint: http://fake/token

---
spring:
  config:
    activate:
      on-profile: dev-gcp
  security:
    oauth2.resourceserver.jwt:
      issuer-uri: ${TOKEN_X_ISSUER}
      audiences:  ${TOKEN_X_CLIENT_ID}


altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  APIGwUrl: https://api-gw-q1.oera.no
  apiBaseUrl: "https://tt02.altinn.no"

ereg-services.baseUrl: "https://ereg-services.dev-fss-pub.nais.io"
sokos-kontoregister.baseUrl: "https://sokos-kontoregister-q2.dev-fss-pub.nais.io"

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokenEndpoint: ${TOKEN_X_TOKEN_ENDPOINT}
  issuer: ${TOKEN_X_ISSUER}

---

spring:
  config:
    activate:
      on-profile: prod-gcp
  security:
    oauth2.resourceserver.jwt:
      issuer-uri: ${TOKEN_X_ISSUER}
      audiences: ${TOKEN_X_CLIENT_ID}

altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  APIGwUrl: https://api-gw.oera.no
  apiBaseUrl: "https://www.altinn.no"

ereg-services.baseUrl: "https://ereg-services.prod-fss-pub.nais.io"
sokos-kontoregister.baseUrl: "https://sokos-kontoregister.prod-fss-pub.nais.io"

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokenEndpoint: ${TOKEN_X_TOKEN_ENDPOINT}
  issuer: ${TOKEN_X_ISSUER}
