server:
  port: 8080
  servlet:
    context-path: /ditt-nav-arbeidsgiver-api

management:
  endpoints.web:
    exposure.include: info, health, metrics, prometheus
    base-path: /internal/actuator
  metrics.web.server.request.autotime.percentiles: 0.99,0.95,0.90,0.80,0.50

spring:
  profiles:
    active: local
  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?user=${DB_USERNAME}&password=${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 10001
      max-lifetime: 30001
      leak-detection-threshold: 30000
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      auto.offset.reset: earliest
      security.protocol: SSL
      ssl:
        keystore:
          type: PKCS12
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore:
          type: PKCS12
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
springdoc:
  swagger-ui:
    enabled: true
  packagesToScan: no.nav.arbeidsgiver.min_side

---

spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: "jdbc:h2:mem:db;MODE=PostgreSQL"
    driver-class-name: org.h2.Driver
    username: sa
    password: password

nais.cluster.name: local

no.nav.security.jwt.issuer.selvbetjening:
  discoveryurl: http://metadata-selvbetjening
  accepted_audience: aud-localhost
  cookiename: localhost-idtoken

mock:
  enabled: true
  port: 8081
  aktorPort: 8082

altinn:
  altinnHeader: "test"
  APIGwHeader: "test"
  proxyUrl: http://localhost:${mock.port}/altinn-rettigheter-proxy
  proxyFallbackUrl: http://localhost:${mock.port}/altinn

unleash:
  url: "https://unleash.herokuapp.com/api/"

token.x:
  clientId: "local"
  tokendingsUrl: "tokendingsUrl"
  audience: "local-client"

---

spring:
  config:
    activate:
      on-profile: labs
  datasource:
    url: "jdbc:h2:mem:db;MODE=PostgreSQL"
    driver-class-name: org.h2.Driver
    username: sa
    password: password

no.nav.security.jwt.issuer.selvbetjening:
  discoveryurl: http://min-side-ag-fakelogin/metadata?issuer=selvbetjening
  accepted_audience: aud-selvbetjening
  cookiename: selvbetjening-idtoken

mock:
  enabled: true
  port: 8081
  aktorPort: 8082

altinn:
  altinnHeader: "test"
  APIGwHeader: "test"
  proxyUrl: http://localhost:${mock.port}/altinn-rettigheter-proxy
  proxyFallbackUrl: http://localhost:${mock.port}/altinn

unleash:
  url: "https://unleash.herokuapp.com/api/"

---
spring:
  config:
    activate:
      on-profile: dev-gcp

no.nav.security.jwt.issuer.selvbetjening:
  discoveryurl: ${LOGINSERVICE_IDPORTEN_DISCOVERY_URL}
  accepted_audience: ${LOGINSERVICE_IDPORTEN_AUDIENCE}
  cookiename: selvbetjening-idtoken

altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  proxyUrl: http://altinn-rettigheter-proxy.arbeidsgiver/altinn-rettigheter-proxy
  proxyFallbackUrl: https://api-gw-q1.oera.no

unleash:
  url: https://unleash.nais.oera.no/api

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokendingsUrl: "https://tokendings.dev-gcp.nais.io/token"
  audience: "dev-fss:arbeidsgiver:min-side-arbeidsgiver-fss-proxy"

---

spring:
  config:
    activate:
      on-profile: prod-gcp

no.nav.security.jwt.issuer.selvbetjening:
  discoveryurl: ${LOGINSERVICE_IDPORTEN_DISCOVERY_URL}
  accepted_audience: ${LOGINSERVICE_IDPORTEN_AUDIENCE}
  cookiename: selvbetjening-idtoken

altinn:
  altinnHeader: ${ALTINN_HEADER}
  APIGwHeader: ${APIGW_HEADER}
  proxyUrl: http://altinn-rettigheter-proxy.arbeidsgiver/altinn-rettigheter-proxy
  proxyFallbackUrl: https://api-gw.oera.no

unleash:
  url: https://unleash.nais.adeo.no/api

token.x:
  privateJwk: ${TOKEN_X_PRIVATE_JWK}
  clientId: ${TOKEN_X_CLIENT_ID}
  tokendingsUrl: "https://tokendings.prod-gcp.nais.io/token"
  audience: "prod-fss:arbeidsgiver:min-side-arbeidsgiver-fss-proxy"
